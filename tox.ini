# Recommended usage of this file is detailed in https://github.com/ansible/eda-partner-testing/blob/main/README.md.
# The linter paths can be changed, but may result in false passes.
# {posargs} in this case would be the path to collection root relative from the .github/workflows dir (`../..`)
# cspell: ignore TOXPYTHON setenv passenv REQPASS PYTHONPYCACHEPREFIX PYTHONIOENCODING PYTHONBREAKPOINT notest envdir envname toxworkdir

[tox]
envlist = lint, darglint, unit, sanity, integration, coverage
skipsdist = true # this repo is not a python package
isolated_build = true
requires =
  tox >= 4.6.3
  tox-extra >= 2.0.0 # bindep check
  setuptools >= 65.3.0 # editable installs

[testenv]
description =
  Run unit tests
  py{39,310,311,312,313}: with {basepython}
deps = -r test_requirements.txt
commands_pre =
  bash -c 'test "$(basename $(cd ../.. && pwd))" == ansible_collections || { echo "Repository must be cloned inside a directory structure like ansible_collections/ansible/eda in order allow ansible-test to run."; exit 3;}'
commands =
  tox -e sanity,unit,integration {posargs}
allowlist_externals =
  bash
  sh
isolated_build = true
;   # See https://stackoverflow.com/a/76884052/99834
;   py310: true
setenv =
    ; COVERAGE_FILE = {env:COVERAGE_FILE:{envdir}/.coverage.{envname}}
    ; COVERAGE_PROCESS_START={toxinidir}/pyproject.toml
    PIP_NO_BUILD_ISOLATION = 1
    PYTHONUNBUFFERED = 1
passenv =
  CURL_CA_BUNDLE  # https proxies, https://github.com/tox-dev/tox/issues/1437
  FORCE_COLOR
  HOME
  NO_COLOR
  PYTEST_*  # allows developer to define their own preferences
  PYTEST_REQPASS  # needed for CI
  PYTHON*  # PYTHONPYCACHEPREFIX, PYTHONIOENCODING, PYTHONBREAKPOINT,...
  PY_COLORS
  RTD_TOKEN
  REQUESTS_CA_BUNDLE  # https proxies
  SETUPTOOLS_SCM_DEBUG
  SSL_CERT_FILE  # https proxies
  SSH_AUTH_SOCK # may be needed by git
  LANG
  LC_*
# https://tox.wiki/en/latest/upgrading.html#editable-mode
package = editable

[testenv:py{39,310,311,312,313}]
description =
  Run all test types: sanity, unit, integration
  py{39,310,311,312,313}: with {basepython}

[testenv:lint]
deps = pre-commit
description = Run linters
commands = pre-commit run -a

[testenv:darglint]
deps = darglint
description = Run darglint
commands = darglint -s numpy -z full extensions/eda/plugins

[testenv:integration,py{39,310,311,312,313}-integration]
deps = -r test_requirements.txt
description =
  Run integration tests
  py{39,310,311,312,313}: with {basepython}
commands =
  # risky: not safe for development it affects user setup
  ansible-galaxy collection install .
  # use same coverage location as ansible-test:
  coverage run --data-file=tests/output/coverage/integration.coverage -m pytest tests/integration -vvv -s {posargs} -k test_url_check_source_sanity
  ; sh -c "coverage combine -a -q --data-file=tests/output/coverage/integration.combined tests/output/coverage/integration*.coverage"
  ; sh -c "coverage report --data-file=tests/output/coverage/integration.combined --show-missing --skip-empty --include=extensions/*,plugins/*,tests/\*"
  ; bash -c "coverage xml --data-file=tests/output/coverage/integration.coverage -o {envdir}/coverage.xml --fail-under=0"

[testenv:unit,py{39,310,311,312,313}-unit]
description =
  Run unit tests
  py{39,310,311,312,313}: with {basepython}
commands =
  # fail-fast if psycopg in not properly installed.
  python3 -c "import psycopg"
  sh -c "ansible-test units --requirements --target-python default -v --num-workers 1 --coverage --truncate 0 {posargs}"
  ansible-test coverage report --requirements --omit '.tox/*,tests/*' --color --all --show-missing -v --truncate 0
  ansible-test coverage combine --export={envdir}

[testenv:sanity,py{39,310,311,312,313}-sanity]
deps = -r test_requirements.txt
description =
  Run ansible-test sanity
  py{39,310,311,312,313}: with {basepython}
commands =
  ansible --version
  ansible-test sanity -v --requirements --coverage --truncate 0 {posargs}

[testenv:coverage]
description = Produce final coverage report for GHA
deps = -r test_requirements.txt
commands =
  ansible-test coverage report --requirements --omit '.tox/*,tests/*' --color --all --show-missing -v --truncate 0
  # produces: tests/output/coverage/coverage.combined
  ansible-test coverage combine --export={envdir}
  # produces tests/output/reports/coverage.xml
  ansible-test coverage xml --requirements
