---
- name: Event stream integration tests
  module_defaults:
    group/ansible.eda.eda:
      aap_hostname: "{{ aap_hostname }}"
      aap_username: "{{ aap_username }}"
      aap_password: "{{ aap_password }}"
      aap_validate_certs: "{{ aap_validate_certs }}"
  block:
    - name: Generate a random_string for the test
      set_fact:
        random_string: "{{ lookup('password', '/dev/null chars=ascii_letters length=16') }}"
      when: random_string is not defined

    - name: Generate a ID for the test
      set_fact:
        test_id: "{{ random_string | to_uuid }}"
      when: test_id is not defined

    - name: Define variables for event stream
      set_fact:
        event_stream_name: "Test_EvenStream_{{ test_id }}"
        new_event_stream_name: "New_Test_EventStream_{{ test_id }}"
        uuid_event_stream_name: "Test_UUID_EventStream_{{ test_id }}"
        credential_name: "Test_Credential_{{ test_id }}"
        custom_uuid: "550e8400-e29b-41d4-a716-446655440000"

    - name: Create credential
      ansible.eda.credential:
        state: present
        name: "{{ credential_name }}"
        description: "This is a test credential"
        credential_type_name: "Basic Event Stream"
        inputs:
          username: "test"
          password: "test"
        organization_name: Default
      register: _result

    - name: Check credential creation
      assert:
        that:
          - _result.changed

    - name: Create an event stream in check mode
      ansible.eda.event_stream:
        state: present
        name: "{{ event_stream_name }}"
        credential_name: "{{ credential_name }}"
        organization_name: Default
        forward_events: false
      check_mode: true
      register: _result

    - name: Check event stream creation in check mode
      assert:
        that:
          - _result.changed

    - name: Create event stream
      ansible.eda.event_stream:
        state: present
        name: "{{ event_stream_name }}"
        credential_name: "{{ credential_name }}"
        organization_name: Default
      register: _result

    - name: Check event stream is created
      assert:
        that:
          - _result.changed

    - name: Create event stream again
      ansible.eda.event_stream:
        state: present
        name: "{{ event_stream_name }}"
        credential_name: "{{ credential_name }}"
        organization_name: Default
      register: _result

    - name: Check event stream is not created again
      assert:
        that:
          - not _result.changed

    - name: Get info about an event stream
      ansible.eda.event_stream_info:
        name: "{{ event_stream_name }}"

    # UPDATE
    - name: Update event_stream name
      ansible.eda.event_stream:
        state: present
        name: "{{ new_event_stream_name }}"
        credential_name: "{{ credential_name }}"
        organization_name: Default
      register: _result

    - name: Check event stream update
      assert:
        that:
          - _result.changed

    - name: Update event stream again
      ansible.eda.event_stream:
        state: present
        name: "{{ new_event_stream_name }}"
        credential_name: "{{ credential_name }}"
        organization_name: Default
      register: _result

    - name: Check event stream is not updated again
      assert:
        that:
          - not _result.changed

    - name: Get info about event stream
      ansible.eda.event_stream_info:
        name: "{{ new_event_stream_name }}"
      register: _result

    - name: Check if event stream name is updated
      assert:
        that:
          - _result.event_streams[0].name == new_event_stream_name

    - name: Update event stream headers and forward_events
      ansible.eda.event_stream:
        state: present
        name: "{{ new_event_stream_name }}"
        credential_name: "{{ credential_name }}"
        organization_name: Default
        headers: "Authorization,Custom-Header"
        forward_events: true
      register: _result

    - name: Check event stream is updated
      assert:
        that:
          - _result.changed

    - name: Get info about event stream
      ansible.eda.event_stream_info:
        name: "{{ new_event_stream_name }}"
      register: _result

    - name: Check if event stream headers and test_mode are updated
      assert:
        that:
          - _result.event_streams[0].name == new_event_stream_name
          - _result.event_streams[0].additional_data_headers == "Authorization,Custom-Header"
          - _result.event_streams[0].test_mode == False

    - name: List all event stream
      ansible.eda.event_stream_info:

    # UUID TESTS
    - name: Create event stream with custom UUID in check mode
      ansible.eda.event_stream:
        state: present
        name: "{{ uuid_event_stream_name }}"
        uuid: "{{ custom_uuid }}"
        credential_name: "{{ credential_name }}"
        organization_name: Default
      check_mode: true
      register: _result

    - name: Check event stream with UUID creation in check mode
      assert:
        that:
          - _result.changed

    - name: Create event stream with custom UUID
      ansible.eda.event_stream:
        state: present
        name: "{{ uuid_event_stream_name }}"
        uuid: "{{ custom_uuid }}"
        credential_name: "{{ credential_name }}"
        organization_name: Default
      register: _result

    - name: Check event stream with UUID is created
      assert:
        that:
          - _result.changed

    - name: Create event stream with custom UUID again (idempotency)
      ansible.eda.event_stream:
        state: present
        name: "{{ uuid_event_stream_name }}"
        uuid: "{{ custom_uuid }}"
        credential_name: "{{ credential_name }}"
        organization_name: Default
      register: _result

    - name: Check event stream with UUID is not created again
      assert:
        that:
          - not _result.changed

    - name: Test duplicate UUID rejection
      ansible.eda.event_stream:
        state: present
        name: "Test_UUID_Duplicate_{{ test_id }}"
        uuid: "{{ custom_uuid }}"
        credential_name: "{{ credential_name }}"
        organization_name: Default
      register: _result
      ignore_errors: true

    - name: Verify duplicate UUID is rejected
      assert:
        that:
          - _result.failed or (_result.changed == false and "already exists" in _result.msg | default(""))

    - name: Get info about UUID event stream
      ansible.eda.event_stream_info:
        name: "{{ uuid_event_stream_name }}"
      register: _result

    - name: Check if UUID event stream exists
      assert:
        that:
          - _result.event_streams | length == 1
          - _result.event_streams[0].name == uuid_event_stream_name

    # DELETE
    - name: Delete operation type without required name parameter
      ansible.eda.event_stream:
        state: absent
      ignore_errors: true
      register: _result

    - name: Check if event stream name is required
      assert:
        that:
          - _result.failed
          - "'missing required arguments: name' in _result.msg"

    - name: Delete non-existing event stream in check mode
      ansible.eda.event_stream:
        name: "Example2"
        state: absent
      check_mode: true
      register: _result

    - name: Check if delete non-existing event stream in check mode
      assert:
        that:
          - not _result.changed

    - name: Delete event stream
      ansible.eda.event_stream:
        name: "{{ new_event_stream_name }}"
        state: absent
      register: _result

    - name: Check if delete non-existing event_stream
      assert:
        that:
          - _result.changed

  always:
    - name: Clean up - event stream
      ansible.eda.event_stream:
        name: "{{ item }}"
        state: absent
      loop:
        - "{{ event_stream_name }}"
        - "{{ new_event_stream_name }}"
        - "{{ uuid_event_stream_name }}"
        - "Test_UUID_Duplicate_{{ test_id }}"
      ignore_errors: true

    - name: Clean up - credential
      ansible.eda.credential:
        name: "{{ credential_name }}"
        state: absent
      ignore_errors: true
