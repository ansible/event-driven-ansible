---
- name: Credential integration tests
  module_defaults:
    group/ansible.eda.eda:
      aap_hostname: "{{ aap_hostname }}"
      aap_username: "{{ aap_username }}"
      aap_password: "{{ aap_password }}"
      aap_validate_certs: "{{ aap_validate_certs }}"
  block:
    - name: Generate a random_string for the test
      set_fact:
        random_string: "{{ lookup('password', '/dev/null chars=ascii_letters length=16') }}"
      when: random_string is not defined

    - name: Generate a ID for the test
      set_fact:
        test_id: "{{ random_string | to_uuid }}"
      when: test_id is not defined

    - name: Define variables for credential and project
      set_fact:
        credential_name: "Test_Credential_{{ test_id }}"
        new_credential_name: "New_Test_Credential_{{ test_id }}"
        credential_copy_name: "Test_Credential_{{ test_id }}_Copy"
        credential_type_name: "Test_CredentialType_{{ test_id }}"

    # CREATE
    - name: Create credential type
      ansible.eda.credential_type:
        name: "{{ credential_type_name }}"
        state: present
        description: "A test credential type"
        inputs:
          fields:
            - id: "field1"
              type: "string"
              label: "Field 5"
        injectors:
          extra_vars:
            field1: "field1"

    - name: Create credential in check mode
      ansible.eda.credential:
        state: present
        name: "{{ credential_name }}"
        description: "This is a test credential"
        credential_type_name: "{{ credential_type_name }}"
        inputs:
          field1: "field1"
        organization_name: Default
      check_mode: true
      register: _result

    - name: Check credential creation in check mode
      assert:
        that:
          - _result.changed

    - name: Create credential
      ansible.eda.credential:
        state: present
        name: "{{ credential_name }}"
        description: "This is a test credential"
        credential_type_name: "{{ credential_type_name }}"
        inputs:
          field1: "field1"
        organization_name: Default
      register: _result

    - name: Check credential creation
      assert:
        that:
          - _result.changed

    - name: Create credential again
      ansible.eda.credential:
        state: present
        name: "{{ credential_name }}"
        description: "This is a test credential"
        credential_type_name: "{{ credential_type_name }}"
        inputs:
          field1: "field1"
        organization_name: Default
      register: _result

    - name: Check credential is not created again
      assert:
        that:
          - not _result.changed

    - name: Get info about a credential
      ansible.eda.credential_info:
        name: "{{ credential_name }}"

    - name: Copy credential
      ansible.eda.credential:
        name: "{{ credential_copy_name }}"
        copy_from: "{{ credential_name }}"
        organization_name: Default
      register: _result

    - name: Check credential is copied
      assert:
        that:
          - _result.changed

    - name: Get info about credentials
      ansible.eda.credential_info:
      register: _credential_info

    - name: Get both created and copied credentials
      set_fact:
        _source_credential: "{{ _credential_info.credentials | selectattr('name', 'equalto', credential_name) | list | first }}"
        _copied_credential: "{{ _credential_info.credentials | selectattr('name', 'equalto', credential_copy_name) | list | first }}"

    - name: Assert credential fields are copied correctly
      ansible.builtin.assert:
        that:
          - _source_credential | dict2items | rejectattr('key', 'in', ignored_fields) | items2dict == _copied_credential | dict2items | rejectattr('key', 'in', ignored_fields) | items2dict
          - _source_credential.name + '_Copy' == _copied_credential.name
      vars:
        ignored_fields:
          - name
          - id
          - created_at
          - updated_at
          - modified_at

    - name: Copy non-existing credential
      ansible.eda.credential:
        name: "{{ credential_copy_name }}"
        copy_from: "invalid_credential"
        organization_name: Default
      register: _result
      ignore_errors: true

    - name: Check credential copy failed
      assert:
        that:
          - _result.failed
          - "\"Unable to access 'id' of the credential to copy from\" in _result.msg"

    - name: Copy credential and use existing name
      ansible.eda.credential:
        name: "{{ credential_copy_name }}"
        copy_from: "{{ credential_name }}"
        organization_name: Default
      register: _result
      ignore_errors: true

    - name: Check credential copy failed
      assert:
        that:
          - _result.failed
          - "'eda credential with this name already exists.' in _result.msg"

    # UPDATE
    - name: Update credential name
      ansible.eda.credential:
        state: present
        name: "{{ new_credential_name }}"
        description: "This is a test credential"
        credential_type_name: "{{ credential_type_name }}"
        inputs:
          field1: "field1"
        organization_name: Default
      register: _result

    - name: Check credential update
      assert:
        that:
          - _result.changed

    - name: Update credential again
      ansible.eda.credential:
        state: present
        name: "{{ new_credential_name }}"
        description: "This is a test credential"
        credential_type_name: "{{ credential_type_name }}"
        inputs:
          field1: "field1"
        organization_name: Default
      register: _result

    - name: Check credential is not updated again
      assert:
        that:
          - not _result.changed
      ignore_errors: true

    - name: Get info about credential
      ansible.eda.credential_info:
        name: "{{ new_credential_name }}"

    - name: List all credentials
      ansible.eda.credential_info:

    # DELETE
    - name: Delete operation type without required name parameter
      ansible.eda.credential:
        state: absent
      ignore_errors: true
      register: _result

    - name: Check if credential name is required
      assert:
        that:
          - _result.failed
          - "'missing required arguments: name' in _result.msg"

    - name: Delete non-existing credential in check mode
      ansible.eda.credential:
        name: "Example2"
        state: absent
      check_mode: true
      register: _result

    - name: Check if delete non-existing credential in check mode
      assert:
        that:
          - not _result.changed

    - name: Delete credential
      ansible.eda.credential:
        name: "{{ new_credential_name }}"
        state: absent
      register: _result

    - name: Check if delete non-existing credential
      assert:
        that:
          - _result.changed
  always:
    - name: Clean up - credential
      ansible.eda.credential:
        name: "{{ item }}"
        state: absent
      loop:
        - "{{ credential_name }}"
        - "{{ new_credential_name }}"
        - "{{ credential_copy_name }}"
      ignore_errors: true

    - name: Clean up - credential type
      ansible.eda.credential_type:
        name: "{{ credential_type_name }}"
        state: absent
      ignore_errors: true
