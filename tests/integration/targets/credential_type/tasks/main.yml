---
- name: Credential type integration tests
  module_defaults:
    group/ansible.eda.eda:
      aap_hostname: "{{ aap_hostname }}"
      aap_username: "{{ aap_username }}"
      aap_password: "{{ aap_password }}"
      aap_validate_certs: "{{ aap_validate_certs }}"
  block:
    - name: Generate a random_string for the test
      set_fact:
        random_string: "{{ lookup('password', '/dev/null chars=ascii_letters length=16') }}"
      when: random_string is not defined

    - name: Generate a ID for the test
      set_fact:
        test_id: "{{ random_string | to_uuid }}"
      when: test_id is not defined

    - name: Define variables for credential and project
      set_fact:
        credential_type_name: "Test_CredentialType_{{ test_id }}"
        new_credential_type_name: "New_Test_CredentialType_{{ test_id }}"

    # CREATE
    - name: Create credential type in check mode
      ansible.eda.credential_type:
        name: "{{ credential_type_name }}"
        state: present
        description: "A test credential type"
        inputs:
          fields:
            - id: "field1"
              type: "string"
              label: "Field 5"
        injectors:
          extra_vars:
            field1: "field1"
      check_mode: true
      register: _result

    - name: Check credential type creation in check mode
      assert:
        that:
          - _result.changed

    - name: Create credential type
      ansible.eda.credential_type:
        name: "{{ credential_type_name }}"
        state: present
        description: "A test credential type"
        inputs:
          fields:
            - id: "field1"
              type: "string"
              label: "Field 5"
        injectors:
          extra_vars:
            field1: "field1"
      register: _result

    - name: Check credential type creation
      assert:
        that:
          - _result.changed

    - name: Create credential type again
      ansible.eda.credential_type:
        name: "{{ credential_type_name }}"
        state: present
        description: "A test credential type"
        inputs:
          fields:
            - id: "field1"
              type: "string"
              label: "Field 5"
        injectors:
          extra_vars:
            field1: "field1"
      register: _result

    - name: Check credential type is not created again
      assert:
        that:
          - not _result.changed

    - name: Get info about a credential type
      ansible.eda.credential_type_info:
        name: "{{ credential_type_name }}"

    # UPDATE
    - name: Update credential type name
      ansible.eda.credential_type:
        name: "{{ credential_type_name }}"
        new_name: "{{ new_credential_type_name }}"
        state: present
        description: "A test credential type"
        inputs:
          fields:
            - id: "field1"
              type: "string"
              label: "Field 5"
        injectors:
          extra_vars:
            field1: "field1"
      register: _result

    - name: Check credential type update
      assert:
        that:
          - _result.changed

    - name: Update credential type again
      ansible.eda.credential_type:
        name: "{{ new_credential_type_name }}"
        new_name: "{{ new_credential_type_name }}"
        state: present
        description: "A test credential type"
        inputs:
          fields:
            - id: "field1"
              type: "string"
              label: "Field 5"
        injectors:
          extra_vars:
            field1: "field1"
      register: _result

    - name: Check credential type is not updated again
      assert:
        that:
          - not _result.changed

    - name: Test HashiCorp Vault credential type with API v2 inputs and metadata
      ansible.eda.credential_type:
        name: "HashiCorp Vault Secret Lookup"
        state: test
        test_inputs:
          url: "https://vault.example.com:8200/"
          token: "dummy-token-for-testing"
          api_version: "v2"
          default_auth_path: "token"
        test_metadata:
          secret_path: "secret/eventstream"
          secret_key: "username"
      register: _test_result
      ignore_errors: true

    - name: Test credential type without inputs or metadata
      ansible.eda.credential_type:
        name: "{{ new_credential_type_name }}"
        state: test
      register: _test_result
      ignore_errors: true

    - name: Check credential type test without inputs
      assert:
        that:
          - not _test_result.changed
          - (_test_result.test_result is defined and _test_result.credential_type is defined) or _test_result.failed
          - "'This field is required' in _test_result.msg"

    - name: Test credential type in check mode to verify test state works
      ansible.eda.credential_type:
        name: "{{ new_credential_type_name }}"
        state: test
        test_inputs:
          url: "https://vault.example.com:8200/"
          token: "dummy-token-for-testing"
          api_version: "v2"
          default_auth_path: "token"
        test_metadata:
          secret_path: "secret/eventstream"
          secret_key: "username"
      check_mode: true
      register: _test_result

    - name: Check that test state works in check mode
      assert:
        that:
          - not _test_result.changed
          - _test_result.test_result is defined
          - _test_result.test_result.success == true
          - "'Check mode' in _test_result.test_result.message"

    - name: Test non-existing credential type
      ansible.eda.credential_type:
        name: "NonExistingCredentialType"
        state: test
      register: _test_result
      ignore_errors: true

    - name: Check test of non-existing credential type fails
      assert:
        that:
          - _test_result.failed
          - "'not found' in _test_result.msg"

    # DELETE
    - name: Delete operation type without required name parameter
      ansible.eda.credential_type:
        state: absent
      ignore_errors: true
      register: _result

    - name: Check if credential type name is required
      assert:
        that:
          - _result.failed
          - "'missing required arguments: name' in _result.msg"

    - name: Delete non-existing credential type in check mode
      ansible.eda.credential_type:
        name: "Example2"
        state: absent
      check_mode: true
      register: _result

    - name: Check if delete non-existing credential type in check mode
      assert:
        that:
          - not _result.changed

    - name: Delete credential type
      ansible.eda.credential_type:
        name: "{{ new_credential_type_name }}"
        state: absent
      register: _result

    - name: Check if delete non-existing credential type
      assert:
        that:
          - _result.changed

  always:
    - name: Clean up - credential type
      ansible.eda.credential_type:
        name: "{{ item }}"
        state: absent
      loop:
        - "{{ credential_type_name }}"
        - "{{ new_credential_type_name }}"
      ignore_errors: true
